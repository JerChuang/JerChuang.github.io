{"version":3,"sources":["webpack:///./src/components/_ui/Button.jsx","webpack:///./src/templates/project.jsx"],"names":["ButtonContainer","colors","blue400","dimensions","maxwidthMobile","pink400","purple400","blue200","blue600","blue300","Button","render","this","props","children","onClick","Component","ProjectHeroContainer","grey200","ProjectTitle","ProjectBody","WorkLink","Link","Project","project","meta","title","project_title","text","titleTemplate","name","content","description","property","author","concat","Layout","RichText","project_hero_image","src","url","alt","project_description","to","className","query","data","projectContent","prismic","allProjects","edges","node","site","siteMetadata"],"mappings":"2dAKA,IAAMA,EAAkB,YAAO,SAAP,qBAAH,8BAELC,IAAOC,QAFF,sKAYEC,IAAWC,eAZb,mKA8BbH,IAAOI,QA9BM,OA+BbJ,IAAOK,UA/BM,6IA2CHL,IAAOM,QA3CJ,UA4CRN,IAAOO,QA5CC,8DAiDDP,IAAOQ,QAjDN,+CAkENC,E,gLAVbC,OAAA,WAAU,IAAD,EACwBC,KAAKC,MAAfA,GADd,EACCC,S,oIADD,kBAEP,OACE,YAACd,EAAD,GAAiBe,QAASH,KAAKC,MAAME,SAAaF,GAC/CD,KAAKC,MAAMC,W,GALCE,a,kDClDrB,IAAMC,EAAuB,YAAO,MAAP,sBAAH,cACVhB,IAAOiB,QADG,4JAepBC,EAAe,YAAO,MAAP,sBAAH,4EAMZC,EAAc,YAAO,MAAP,sBAAH,0HAcXC,EAAW,YAAOC,OAAP,sBAAH,2EAMRC,EAAU,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAC1B,OACE,8BACE,YAAC,IAAD,CACEC,MAAUF,EAAQG,cAAc,GAAGC,KAA9B,qCACLC,cAAa,QAAUJ,EAAKC,MAC5BD,KAAM,CACJ,CACEK,KAAK,cACLC,QAASN,EAAKO,aAEhB,CACEC,SAAS,WACTF,QAAYP,EAAQG,cAAc,GAAGC,KAA9B,sCAET,CACEK,SAAS,iBACTF,QAASN,EAAKO,aAEhB,CACEC,SAAS,UACTF,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKS,QAEhB,CACEJ,KAAK,gBACLC,QAASN,EAAKC,OAEhB,CACEI,KAAK,sBACLC,QAASN,EAAKO,cAEhBG,OAAOV,KAEX,YAACW,EAAA,EAAD,KACE,YAACjB,EAAD,KAAekB,WAAS1B,OAAOa,EAAQG,gBACtCH,EAAQc,oBACP,YAACrB,EAAD,KACE,mBAAKsB,IAAKf,EAAQc,mBAAmBE,IAAKC,IAAI,UAGlD,YAACrB,EAAD,KACGiB,WAAS1B,OAAOa,EAAQkB,qBACzB,YAACrB,EAAD,CAAUsB,GAAI,SACZ,YAAC,EAAD,CAAQC,UAAU,qBAAlB,uBAkBCC,GAVE,sBAAe,IAAZC,EAAW,EAAXA,KACVC,EAAiBD,EAAKE,QAAQC,YAAYC,MAAM,GAAGC,KACnD1B,EAAOqB,EAAKM,KAAKC,aACvB,OAAO,YAAC,EAAD,CAAS7B,QAASuB,EAAgBtB,KAAMA,KAO/B","file":"component---src-templates-project-jsx-d7ec6a402f9d0f3248e6.js","sourcesContent":["import React, { Component } from \"react\"\nimport styled from \"@emotion/styled\"\nimport colors from \"styles/colors\"\nimport dimensions from \"styles/dimensions\"\n\nconst ButtonContainer = styled(\"button\")`\n  padding: 1em 2em;\n  background: ${colors.blue400};\n  font-weight: 600;\n  color: white;\n  outline: none;\n  border: none;\n  font-size: 1rem;\n  border-radius: 2px;\n  position: relative;\n  transition: background 100ms ease-in-out;\n\n  @media (max-width: ${dimensions.maxwidthMobile}px) {\n    padding: 0.8em 1.8em;\n    font-size: 1em;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      135deg,\n      ${colors.pink400} 0%,\n      ${colors.purple400} 100%\n    );\n    z-index: -1;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background: transparent;\n    transition: background 100ms ease-in-out;\n  }\n\n  &.Button--secondary {\n    background: ${colors.blue200};\n    color: ${colors.blue600};\n    padding: 0.95em 1.8em;\n    font-size: 0.95rem;\n\n    &:hover {\n      background: ${colors.blue300};\n      transition: background 100ms ease-in-out;\n    }\n  }\n`\n\nclass Button extends Component {\n  render() {\n    const { children, ...props } = this.props\n    return (\n      <ButtonContainer onClick={this.props.onClick} {...props}>\n        {this.props.children}\n      </ButtonContainer>\n    )\n  }\n}\n\nexport default Button\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport styled from \"@emotion/styled\"\nimport colors from \"styles/colors\"\nimport { Link, graphql } from \"gatsby\"\nimport { RichText } from \"prismic-reactjs\"\nimport Button from \"components/_ui/Button\"\nimport Layout from \"components/Layout\"\n\nconst ProjectHeroContainer = styled(\"div\")`\n  background: ${colors.grey200};\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  overflow: hidden;\n  position: relative;\n  padding-top: 2.25em;\n  margin-bottom: 3.5em;\n\n  img {\n    max-width: 600px;\n  }\n`\n\nconst ProjectTitle = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n  text-align: center;\n`\n\nconst ProjectBody = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n\n  .block-img {\n    margin-top: 3.5em;\n    margin-bottom: 0.5em;\n\n    img {\n      width: 100%;\n    }\n  }\n`\n\nconst WorkLink = styled(Link)`\n  margin-top: 3em;\n  display: block;\n  text-align: center;\n`\n\nconst Project = ({ project, meta }) => {\n  return (\n    <>\n      <Helmet\n        title={`${project.project_title[0].text} | Prist, Gatsby & Prismic Starter`}\n        titleTemplate={`%s | ${meta.title}`}\n        meta={[\n          {\n            name: `description`,\n            content: meta.description,\n          },\n          {\n            property: `og:title`,\n            content: `${project.project_title[0].text} | Prist, Gatsby & Prismic Starter`,\n          },\n          {\n            property: `og:description`,\n            content: meta.description,\n          },\n          {\n            property: `og:type`,\n            content: `website`,\n          },\n          {\n            name: `twitter:card`,\n            content: `summary`,\n          },\n          {\n            name: `twitter:creator`,\n            content: meta.author,\n          },\n          {\n            name: `twitter:title`,\n            content: meta.title,\n          },\n          {\n            name: `twitter:description`,\n            content: meta.description,\n          },\n        ].concat(meta)}\n      />\n      <Layout>\n        <ProjectTitle>{RichText.render(project.project_title)}</ProjectTitle>\n        {project.project_hero_image && (\n          <ProjectHeroContainer>\n            <img src={project.project_hero_image.url} alt=\"bees\" />\n          </ProjectHeroContainer>\n        )}\n        <ProjectBody>\n          {RichText.render(project.project_description)}\n          <WorkLink to={\"/work\"}>\n            <Button className=\"Button--secondary\">See other work</Button>\n          </WorkLink>\n        </ProjectBody>\n      </Layout>\n    </>\n  )\n}\n\nexport default ({ data }) => {\n  const projectContent = data.prismic.allProjects.edges[0].node\n  const meta = data.site.siteMetadata\n  return <Project project={projectContent} meta={meta} />\n}\n\nProject.propTypes = {\n  project: PropTypes.object.isRequired,\n}\n\nexport const query = graphql`\n  query ProjectQuery($uid: String) {\n    prismic {\n      allProjects(uid: $uid) {\n        edges {\n          node {\n            project_title\n            project_preview_description\n            project_preview_thumbnail\n            project_category\n            project_post_date\n            project_hero_image\n            project_description\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}